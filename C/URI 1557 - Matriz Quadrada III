/*Escreva um algoritmo que leia um inteiro N (0 ≤ N ≤ 15), correspondente a ordem de uma matriz M de inteiros, e construa a matriz de acordo com o exemplo abaixo.

Entrada
A entrada consiste de vários inteiros, um valor por linha, correspondentes as ordens das matrizes a serem construídas. O final da entrada é marcado por um valor de ordem igual a zero (0).

Saída
Para cada inteiro da entrada imprima a matriz correspondente, de acordo com o exemplo. Os valores das matrizes devem ser formatados em um campo de tamanho T justificados à direita e separados por espaço, onde T é igual ao número de dígitos do maior número da matriz. Após o último caractere de cada linha da matriz não deve haver espaços em branco. Após a impressão de cada matriz deve ser deixada uma linha em branco.
*/
#include <stdio.h>
int dig(int x)
{
int a=x,b=0;
while(a)
{
a/=10;
b++;
}
return b;
}
int main()
{
int i=0,j=0,N,a,b,c=1,x,y=0,I,d,e=0,f,g,h;
while(1)
{
scanf("%d", &N);
if(N==0) break;
else
{
int ara[N][N];
I=N-1;
for(x=0,c=1,y=0; x<N; x++)

{
for(a=y,b=0; a>=0; a--,b++)
ara[a][b]=c;
y++; c*=2;
}
for(x=1,y=1; x<N; x++)
{
for(a=I,b=y; b<=I; a--,b++)
ara[a][b]=c;
y++; c*=2;
}
d=dig(ara[I][I]);
for(i=0; i<N; i++)
{
for(j=0; j<N; j++)
{
if(j==0)
{
h=ara[i][j];
e=dig(h);
g=d-e;
for(f=1;f<=g; f++)
printf(" ");
printf("%d",ara[i][j]);
}
else
{
h=ara[i][j];
e=dig(h);
g=d-e;
for(f=1;f<=g; f++)
printf(" ");
printf(" %d",ara[i][j]);
}
}
printf("\n");
}
printf("\n");
}
}
return 0;
}
